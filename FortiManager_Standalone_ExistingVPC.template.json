{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "(v4.4) AWS CFT to deploy a standalone FortiManager into an existing VPC",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "VPC Configuration"
					},
					"Parameters": [
						"VPCID",
						"VPCCIDR",
						"Subnet"
					]
				},
				{
					"Label": {
						"default": "FortiManager Instance Configuration"
					},
					"Parameters": [
						"InstanceType",
						"CIDRForInstanceAccess",
						"KeyPair",
						"EncryptVolumes",
						"PubliclyAvailable",
						"S3EndpointDeployment",
						"SubnetRouteTableID",
						"InitS3Bucket",
						"FortiManagerVersion",
						"LicenseType",
						"FortiManagerLicenseFile"
					]
				},
				{
					"Label": {
						"default": "FortiManager Interface IP Configuration"
					},
					"Parameters": [
						"FortiManagerIP"
					]
				}
			]
		}
	},
	"Parameters": {
		"VPCID": {
			"Type": "AWS::EC2::VPC::Id",
			"Description": "Select the VPC to use"
		},
		"VPCCIDR": {
			"Type": "String",
			"Default": "10.0.0.0/16",
			"Description": "Provide a network CIDR for the VPC",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"Subnet": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the subnet to deploy the FortiManager into"
		},
		"FortiManagerIP": {
			"Type": "String",
			"Default": "10.0.1.10/24",
			"Description": "Provide the IP address in CIDR form for the FortiManager to use",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"PubliclyAvailable": {
			"Type": "String",
			"Default": "Yes",
			"Description": "Select if the FMG will have a EIP to be publicly available or not.  *** If you select No, then an S3 endpoint needs to be deployed and reachable from the subnet the FortiManaager is in to successfully bootstrap.  Also, PAYG licensed instances require internet access to register with FortiCare successfully. ***",
			"AllowedValues": [
				"Yes",
				"No"
			]
		},
		"InstanceType": {
			"Type": "String",
			"Default": "m5.xlarge",
			"Description": "Select the instance type for the FortiManager.  *** If using PAYG2Devices for LicenseType, you can only use up to a m5.xlarge ***",
			"AllowedValues": [
				"m5.large",
				"m5.xlarge",
				"m5.2xlarge",
				"m5.4xlarge",
				"m5.8xlarge",
				"m5.12xlarge",
				"m5.16xlarge",
				"m5.24xlarge"
			]
		},
		"CIDRForInstanceAccess": {
			"Type": "String",
			"Default": "0.0.0.0/0",
			"Description": "Provide a network CIDR from which the FortiManager instance will be accessed"
		},
		"KeyPair": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "Select a keypair to associate with the FortiManager"
		},
		"EncryptVolumes": {
			"Type": "String",
			"Description": "Select 'true' to encrypt the FortiManager instances OS and Log volumes with your account's KMS default master key for EBS.  Otherwise select false to leave unencrypted",
			"AllowedValues": [
				"true",
				"false"
			]
		},
		"S3EndpointDeployment": {
			"Type": "String",
			"Description": "Select if a new S3 Endpoint should be deployed or not. If you used the BaseVPC template then select UseExisting.  *** If the FortiManager does not have direct internet access, an S3 Endpoint should be used and associated to the subnet the FortiManager will be deployed in for successful bootstrapping ***",
			"AllowedValues": [
				"DeployNew",
				"UseExisting"
			]
		},
		"SubnetRouteTableID": {
			"Type": "String",
			"Description": "If a new S3 Endpoint is to be deployed, provide the route table ID associated with the subnet the FortiManager will be deployed in."
		},
		"InitS3Bucket": {
			"Type": "String",
			"MinLength": "1",
			"Description": "Provide the Init S3 Bucket name, where your config file will be created  *** the bucket should exist in the same region as this deployment for successful bootstrapping ***"
		},
		"FortiManagerVersion": {
			"Type": "String",
			"Default": "6.4.x",
			"Description": "Select the verion of FortiOS to use (latest GA AMI will be used)",
			"AllowedValues": [
				"6.4.x",
				"7.0.x"
			]
		},
		"LicenseType": {
			"Type": "String",
			"Description": "Select the license type for the FortiManager",
			"AllowedValues": [
				"BYOL",
				"PAYG2Devices",
				"PAYG10Devices",
				"PAYG30Devices",
				"PAYG100Devices",
				"PAYG500Devices"
			]
		},
		"FortiManagerLicenseFile": {
			"Type": "String",
			"Description": "[BYOL Only, leave blank for PAYG] Provide the name of the BYOL license file in the Init S3 Bucket for the FortiManager (ie fmg.lic or prefix/fmg.lic)"
		}
	},
	"Mappings": {
		"FortiOSAMISearchString": {
			"6.4.x": {
				"BYOL": "FortiManager VM64-AWS *(6.4.*)*|os40mk0fw6472m8ak2lnzp4s",
				"PAYG2Devices": "FortiManager VM64-AWSOnDemand *(6.4.*)*|5j3m869sh84tixvmg9br26hkn",
				"PAYG10Devices": "FortiManager VM64-AWSOnDemand *(6.4.*)*|691k7ni0x5sbcj3reejxw3cy1",
				"PAYG30Devices": "FortiManager VM64-AWSOnDemand *(6.4.*)*|8gmpxt177zhq1vhh32l7o69wf",
				"PAYG100Devices": "FortiManager VM64-AWSOnDemand *(6.4.*)*|d3o35cw8hzusqeiv83jl1xuwb",
				"PAYG500Devices": "FortiManager VM64-AWSOnDemand *(6.4.*)*|e5s6s9r3hgizwpe9tavoxwkzv"
			},
			"7.0.x": {
				"BYOL": "FortiManager VM64-AWS *(7.0.*)*|os40mk0fw6472m8ak2lnzp4s",
				"PAYG2Devices": "FortiManager VM64-AWS *(7.0.*)*|os40mk0fw6472m8ak2lnzp4s",
				"PAYG10Devices": "FortiManager VM64-AWS *(7.0.*)*|os40mk0fw6472m8ak2lnzp4s",
				"PAYG30Devices": "FortiManager VM64-AWS *(7.0.*)*|os40mk0fw6472m8ak2lnzp4s",
				"PAYG100Devices": "FortiManager VM64-AWS *(7.0.*)*|os40mk0fw6472m8ak2lnzp4s",
				"PAYG500Devices": "FortiManager VM64-AWS *(7.0.*)*|os40mk0fw6472m8ak2lnzp4s"
			}
		}
	},
	"Conditions": {
		"CreateS3Endpoint": {
			"Fn::Equals": [
				{
					"Ref": "S3EndpointDeployment"
				},
				"DeployNew"
			]
		},
		"CreateEIP": {
			"Fn::Equals": [
				{
					"Ref": "PubliclyAvailable"
				},
				"Yes"
			]
		}
	},
	"Resources": {
		"S3Endpoint": {
			"Type": "AWS::EC2::VPCEndpoint",
			"Condition": "CreateS3Endpoint",
			"Properties": {
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": "*",
							"Action": [
								"s3:GetObject"
							],
							"Resource": [
								"*"
							]
						}
					]
				},
				"RouteTableIds": [
					{
						"Ref": "SubnetRouteTableID"
					}
				],
				"ServiceName": {
					"Fn::Sub": "com.amazonaws.${AWS::Region}.s3"
				},
				"VpcId": {
					"Ref": "VPCID"
				}
			}
		},
		"InstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "FGCPPolicy",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"ec2:DescribeInstances",
										"eks:DescribeCluster",
										"eks:ListClusters",
										"inspector:DescribeFindings",
										"inspector:ListFindings",
										"s3:GetObject"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "InstanceRole"
					}
				]
			}
		},
		"FortiManagerSecGrp": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"GroupDescription": "FortiManagerSecGrp",
				"SecurityGroupIngress": [
					{
						"Description": "Allow remote access to Fmg",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "CIDRForInstanceAccess"
						}
					},
					{
						"Description": "Allow local VPC access to Fmg",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "VPCCIDR"
						}
					},
					{
						"Description": "Allow 10.0.0.0/8 access to tcp port 541 Fmg",
						"IpProtocol": "tcp",
						"FromPort": "541",
						"ToPort": "541",
						"CidrIp": "10.0.0.0/8"
					},
					{
						"Description": "Allow 172.16.0.0/12 access to tcp port 541 Fmg",
						"IpProtocol": "tcp",
						"FromPort": "541",
						"ToPort": "541",
						"CidrIp": "172.16.0.0/12"
					},
					{
						"Description": "Allow 192.168.0.0/16 access to tcp port 541 Fmg",
						"IpProtocol": "tcp",
						"FromPort": "541",
						"ToPort": "541",
						"CidrIp": "192.168.0.0/16"
					},
					{
						"Description": "Allow 10.0.0.0/8 access to tcp port 514 Fmg",
						"IpProtocol": "tcp",
						"FromPort": "514",
						"ToPort": "514",
						"CidrIp": "10.0.0.0/8"
					},
					{
						"Description": "Allow 172.16.0.0/12 access to tcp port 514 Fmg",
						"IpProtocol": "tcp",
						"FromPort": "514",
						"ToPort": "514",
						"CidrIp": "172.16.0.0/12"
					},
					{
						"Description": "Allow 192.168.0.0/16 access to tcp port 514 Fmg",
						"IpProtocol": "tcp",
						"FromPort": "514",
						"ToPort": "514",
						"CidrIp": "192.168.0.0/16"
					},
					{
						"Description": "Allow 10.0.0.0/8 access to udp port 514 Fmg",
						"IpProtocol": "udp",
						"FromPort": "514",
						"ToPort": "514",
						"CidrIp": "10.0.0.0/8"
					},
					{
						"Description": "Allow 172.16.0.0/12 access to udp port 514 Fmg",
						"IpProtocol": "udp",
						"FromPort": "514",
						"ToPort": "514",
						"CidrIp": "172.16.0.0/12"
					},
					{
						"Description": "Allow 192.168.0.0/16 access to udp port 514 Fmg",
						"IpProtocol": "udp",
						"FromPort": "514",
						"ToPort": "514",
						"CidrIp": "192.168.0.0/16"
					}
				]
			}
		},
		"Fmg": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::GetAtt": [
						"RunImageFunction",
						"ami"
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"BlockDeviceMappings": [
					{
						"DeviceName": "/dev/sda1",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "5",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					},
					{
						"DeviceName": "/dev/sdb",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "80",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					}
				],
				"NetworkInterfaces": [
					{
						"NetworkInterfaceId": {
							"Ref": "FmgEni0"
						},
						"DeviceIndex": "0"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FortiManager1"
								]
							]
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"{\n",
								"\"bucket\"",
								" : \"",
								{
									"Ref": "InitS3Bucket"
								},
								"\"",
								",\n",
								"\"region\"",
								" : ",
								"\"",
								{
									"Ref": "AWS::Region"
								},
								"\"",
								",\n",
								"\"license\"",
								" : ",
								"\"",
								"/",
								{
									"Ref": "FortiManagerLicenseFile"
								},
								"\"",
								",\n",
								"\"config\"",
								" : ",
								"\"",
								"/fmg1.txt\"",
								"\n",
								"}"
							]
						]
					}
				}
			}
		},
		"FmgEni0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [
					{
						"Ref": "FortiManagerSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "Subnet"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fmg1eni0"
								]
							]
						}
					},
					{
						"Key": "Interface",
						"Value": "eth0"
					}
				],
				"PrivateIpAddresses": [
					{
						"PrivateIpAddress": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "FortiManagerIP"
										}
									]
								}
							]
						},
						"Primary": "true"
					}
				]
			}
		},
		"FmgEIP": {
			"Type": "AWS::EC2::EIP",
			"Condition": "CreateEIP",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"FmgEIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Condition": "CreateEIP",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"FmgEIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "FmgEni0"
				},
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiManagerIP"
								}
							]
						}
					]
				}
			},
			"DependsOn": "FmgEIP"
		},
		"LambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "S3AccessRole",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"s3:PutObject",
										"ec2:DescribeImages"
									],
									"Resource": "*"
								},
								{
									"Effect": "Allow",
									"Action": [
										"logs:*"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"ImageFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import boto3",
								"import cfnresponse",
								"import logging",
								"import json",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"client = boto3.client('ec2')",
								"",
								"def handler(event, context):",
								"    if event['RequestType'] == 'Create':",
								"        logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"    else:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"        return None",
								"",
								"    try:",
								"        resp = client.describe_images(",
								"            Filters=[",
								"                {'Name': 'name', 'Values': [event['ResourceProperties']['LicenseType']]},",
								"                {'Name': 'product-code.type', 'Values': ['marketplace']},",
								"                {'Name': 'product-code', 'Values': [event['ResourceProperties']['ProductCode']]}",
								"            ],",
								"            Owners=['679593333241', '464423754048', '211372476111', '345084742485', '874634375141', '939706979954', '769304176199']",
								"        )",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200 and resp['Images'] != []:",
								"        ami_dict = {}",
								"        ami_list = []",
								"        for entry in resp['Images']:",
								"            key = entry['CreationDate']",
								"            ami_dict[key] = entry['ImageId']",
								"        ami_list = sorted(ami_dict, reverse = True)",
								"        logger.info('--> found latest AMI: {}, {}'.format(ami_dict[ami_list[0]], ami_list[0]))",
								"        responseData = {'ami': ami_dict[ami_list[0]]}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"    else:",
								"        logger.error('!!--> Unable to find AMI in response! {}'.format(resp))",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""
							]
						]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python3.8",
				"MemorySize": 128
			}
		},
		"RunImageFunction": {
			"Type": "Custom::ImageFunction",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"ImageFunction",
						"Arn"
					]
				},
				"LicenseType": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"|",
								{
									"Fn::FindInMap": [
										"FortiOSAMISearchString",
										{
											"Ref": "FortiManagerVersion"
										},
										{
											"Ref": "LicenseType"
										}
									]
								}
							]
						}
					]
				},
				"ProductCode": {
					"Fn::Select": [
						"1",
						{
							"Fn::Split": [
								"|",
								{
									"Fn::FindInMap": [
										"FortiOSAMISearchString",
										{
											"Ref": "FortiManagerVersion"
										},
										{
											"Ref": "LicenseType"
										}
									]
								}
							]
						}
					]
				}
			}
		},
		"InitFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import ast",
								"import boto3",
								"import cfnresponse",
								"import json",
								"import logging",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"s3 = boto3.client('s3')",
								"",
								"template = '''\\",
								"config system global",
								"set hostname {Hostname}",
								"end",
								"config system admin setting",
								"set idle_timeout 60",
								"end",
								"config system interface",
								"edit port1",
								"set alias public",
								"set mode dhcp",
								"set allowaccess ping https",
								"next",
								"end\\",
								"'''",
								"",
								"def handler(event, context):",
								"    if event['RequestType'] == 'Create':",
								"        logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"        dict1 = ast.literal_eval(event['ResourceProperties']['FMG1Info'])",
								"        fmg1_conf = template.format(**dict1)",
								"        fmg1_result = False",
								"    else:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"        return None",
								"",
								"    try:",
								"        resp = s3.put_object(Body=fmg1_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='fmg1.txt')",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:",
								"        fmg1_result = True",
								"        logger.info('<-- s3 put_object fmg1.txt successful')",
								"",
								"    if fmg1_result is True:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"    else:",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""
							]
						]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python3.8",
				"MemorySize": 128
			}
		},
		"RunInitFunction": {
			"Type": "Custom::InitFunction",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"InitFunction",
						"Arn"
					]
				},
				"S3Bucket": {
					"Ref": "InitS3Bucket"
				},
				"FMG1Info": {
					"Fn::Join": [
						"",
						[
							"{",
							"'VPCCIDR':'",
							{
								"Ref": "VPCCIDR"
							},
							"',",
							"'Hostname':'",
							{
								"Fn::Join": [
									"",
									[
										{
											"Ref": "AWS::StackName"
										},
										"-FortiManager"
									]
								]
							},
							"'}"
						]
					]
				}
			}
		}
	},
	"Outputs": {
		"Username": {
			"Value": "admin",
			"Description": "Username for the FortiManagers"
		},
		"Password": {
			"Value": {
				"Ref": "Fmg"
			},
			"Description": "Initial password for the FortiManager"
		},
		"FortiManagerLoginURL": {
			"Value": {
				"Fn::Join": [
					"",
					[
						"https://",
						{
							"Fn::If": [
								"CreateEIP",
								{
									"Ref": "FmgEIP"
								},
								{
									"Fn::GetAtt": [
										"FmgEni0",
										"PrimaryPrivateIpAddress"
									]
								}
							]
						}
					]
				]
			},
			"Description": "Login URL for FortiManager"
		}
	}
}